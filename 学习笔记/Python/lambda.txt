Python中的lambda的“一个语法，三个特性，四个用法，一个争论”。
一个语法：
在Python中，lambda的语法是唯一的。其形式如下：
lambda argument_list: expression
其中，lambda是Python预留的关键字，argument_list和expression由用户自定义。具体介绍如下。
这里的argument_list是参数列表。它的结构与Python中函数(function)的参数列表是一样的。具体来说，argument_list可以有非常多的形式。例如：
    a, b
    a=1, b=2
    *args
    **kwargs
    a, b=1, *args
    空
这里的expression是一个关于参数的表达式。表达式中出现的参数需要在argument_list中有定义，并且表达式只能是单行的。以下都是合法的表达式：
   1
   None
   a + b
   sum(a)
   1 if a >10 else 0
这里的lambda argument_list: expression表示的是一个函数。这个函数叫做lambda函数。
三个特性
lambda函数有如下特性：
lambda函数是匿名的：所谓匿名函数，通俗地说就是没有名字的函数。lambda函数没有名字。
lambda函数有输入和输出：输入是传入到参数列表argument_list的值，输出是根据表达式expression计算得到的值。
lambda函数一般功能简单：单行expression决定了lambda函数不可能完成复杂的逻辑，只能完成非常简单的功能。由于其实现的功能一目了然，甚至不需要专门的名字来说明。
下面是一些lambda函数示例：
lambda x, y: x*y；函数输入是x和y，输出是它们的积x*y
lambda:None；函数没有输入参数，输出是None
lambda *args: sum(args); 输入是任意个数的参数，输出是它们的和(隐性要求是输入参数必须能够进行加法运算)
lambda **kwargs: 1；输入是任意键值对参数，输出是1
四个用法：
由于lambda语法是固定的，其本质上只有一种用法，那就是定义一个lambda函数。在实际中，根据这个lambda函数应用场景的不同，可以将lambda函数的用法扩展为以下几种：
1 将lambda函数赋值给一个变量，通过这个变量间接调用该lambda函数。
例如，执行语句add=lambda x, y: x+y，定义了加法函数lambda x, y: x+y，并将其赋值给变量add，这样变量add便成为具有加法功能的函数。例如，执行add(1,2)，输出为3。
2 将lambda函数赋值给其他函数，从而将其他函数用该lambda函数替换。
例如，为了把标准库time中的函数sleep的功能屏蔽(Mock)，我们可以在程序初始化时调用：time.sleep=lambda x:None。这样，在后续代码中调用time库的sleep函数将不会执行原有的功能。例如，执行time.sleep(3)时，程序不会休眠3秒钟，而是什么都不做。
3 将lambda函数作为其他函数的返回值，返回给调用者。
函数的返回值也可以是函数。例如return lambda x, y: x+y返回一个加法函数。这时，lambda函数实际上是定义在某个函数内部的函数，称之为嵌套函数，或者内部函数。对应的，将包含嵌套函数的函数称之为外部函数。内部函数能够访问外部函数的局部变量。
4 将lambda函数作为参数传递给其他函数。
部分Python内置函数接收函数作为参数。典型的此类内置函数有这些。
filter函数。此时lambda函数用于指定过滤列表元素的条件。例如filter(lambda x: x % 3 == 0, [1, 2, 3])指定将列表[1,2,3]中能够被3整除的元素过滤出来，其结果是[3]。
sorted函数。此时lambda函数用于指定对列表中所有元素进行排序的准则。例如sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))将列表[1, 2, 3, 4, 5, 6, 7, 8, 9]按照元素与5距离从小到大进行排序，其结果是[5, 4, 6, 3, 7, 2, 8, 1, 9]。
map函数。此时lambda函数用于指定对列表中每一个元素的共同操作。例如map(lambda x: x+1, [1, 2,3])将列表[1, 2, 3]中的元素分别加1，其结果[2, 3, 4]。
reduce函数。此时lambda函数用于指定列表中两两相邻元素的结合条件。例如reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])将列表 [1, 2, 3, 4, 5, 6, 7, 8, 9]中的元素从左往右两两以逗号分隔的字符的形式依次结合起来，其结果是'1, 2, 3, 4, 5, 6, 7, 8, 9'。
另外，部分Python库函数也接收函数作为参数，例如gevent的spawn函数。此时，lambda函数也能够作为参数传入。

一个争议：
事实上，关于lambda在Python社区是存在争议的。Python程序员对于到底要不要使用lambda意见不一致。
支持方认为使用lambda编写的代码更紧凑，更“pythonic”。
反对方认为，lambda函数能够支持的功能十分有限，其不支持多分支程序if...elif...else...和异常处理程序try ...except...。并且，lambda函数的功能被隐藏，对于编写代码之外的人员来说，理解lambda代码需要耗费一定的理解成本。他们认为，使用for循环等来替代lambda是一种更加直白的编码风格。
关于lambda的争执没有定论。在实际中，是否使用lambda编程取决于程序员的个人喜好。

1，lambda的一般形式是关键字lambda后面跟一个或多个参数，紧跟一个冒号，以后是一个表达式。lambda是一个表达式而不是一个语句。它能够出现在Python语法不允许def出现的地方。作为表达式，lambda返回一个值（即一个新的函数）。lambda用来编写简单的函数，而def用来处理更强大的任务。
f = lambda x,y,z : x+y+z
print f(1,2,3)
g = lambda x,y=2,z=3 : x+y+z
print g(1,z=4,y=5)
输出结果为：
6
10

2，lambda表达式常用来编写跳转表（jump table），就是行为的列表或字典。例如：
L = [(lambda x: x**2),
	(lambda x: x**3),
	(lambda x: x**4)]
print L[0](2),L[1](2),L[2](2)

D = {'f1':(lambda: 2+3),
	'f2':(lambda: 2*3),
	'f3':(lambda: 2**3)}
print D['f1'](),D['f2'](),D['f3']()
输出结果为：
4 8 16
5 6 8

3，lambda表达式可以嵌套使用，但是从可读性的角度来说，应尽量避免使用嵌套的lambda表达式。
4，map函数可以在序列中映射函数进行操作。例如：
def inc(x):
	return x+10
L = [1,2,3,4]
print map(inc,L)
print map((lambda x: x+10),L)
输出结果为：
[11, 12, 13, 14]
[11, 12, 13, 14]

5，列表解析可以实现map函数同样的功能，而且往往比map要快。例如：
print [x**2 for x in range(10)]
print map((lambda x: x**2), range(10))
输出结果为：
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

6，列表解析比map更强大。例如：
print [x+y for x in range(5) if x%2 == 0 for y in range(10) if y%2 ==1]
输出结果为：
[1, 3, 5, 7, 9, 3, 5, 7, 9, 11, 5, 7, 9, 11, 13]

7，生成器函数就像一般的函数，但它们被用作实现迭代协议，因此生成器函数只能在迭代语境中出现。例如：
def gensquares(N):
	for i in range(N):
		yield i**2
		
for i in gensquares(5):
	print i,
输出结果为：
0 1 4 9 16

8，所有的迭代内容（包括for循环、map调用、列表解析等等）将会自动调用iter函数，来看看是不是支持了迭代协议。
9，生成器表达式就像列表解析一样，但它们是扩在圆括号()中而不是方括号[]中。例如：
for num in (x**2 for x in range(5)):
	print num,
输出结果为：
0 1 4 9 16

10，列表解析比for循环具有更好的性能。尽管如此，在编写Python代码时，性能不应该是最优先考虑的。
11，没有return语句时，函数将返回None对象。


