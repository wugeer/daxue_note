CPU调度算法：
CPU调度决策可在如下四种环境下发生
a 当一个进程从运行状态切换到等待状态 例如，I/O请求或调用wait以等待一个子进程的终止
b 党一个进程从运行状态切换到就需状态 例如，当出现中断
c 当一个进程从等待状态切换到就需状态 例如，I/O完成
d 当一个进程终止
当调度只能发生在第一和第四种情况时，称调度方案是非抢占的，否则调度方案是可抢占的。
采用非抢占调度，一旦CPU被分配给一个进程，那么该进程会一直使用CPU直到进程终止或切换到等待状态时释放CPU

1 先来先服务 （FCFS，first come first served） 
在所有调度算法中，最简单的是非抢占式的FCFS算法。 
算法原理：进程按照它们请求CPU的顺序使用CPU.就像你买东西去排队，谁第一个排，谁就先被执行，在它执行的过程中，不会中断它。当其他人也想进入内存被执行，就要排队等着，如果在执行过程中出现一些事，他现在不想排队了，下一个排队的就补上。此时如果他又想排队了，只能站到队尾去。 
算法优点：易于理解且实现简单，只需要一个队列(FIFO)，且相当公平 
算法缺点：比较有利于长进程，而不利于短进程，有利于CPU 繁忙的进程，而不利于I/O 繁忙的进程

2 最短作业优先（SJF, Shortest Job First） 
短作业优先（SJF, Shortest Job First）又称为“短进程优先”SPN(Shortest Process Next)；这是对FCFS算法的改进，其目标是减少平均周转时间。 
算法原理：对预计执行时间短的进程优先分派处理机。通常后来的短进程不抢先正在执行的进程。 
算法优点：相比FCFS 算法，该算法可改善平均周转时间和平均带权周转时间，缩短进程的等待时间，提高系统的吞吐量。 
算法缺点：对长进程非常不利，可能长时间得不到执行，且未能依据进程的紧迫程度来划分执行的优先级，以及难以准确估计进程的执行时间，从而影响调度性能。

3 最高响应比优先法(HRRN，Highest Response Ratio Next) 
最高响应比优先法(HRRN，Highest Response Ratio Next)是对FCFS方式和SJF方式的一种综合平衡。FCFS方式只考虑每个作业的等待时间而未考虑执行时间的长短，而SJF方式只考虑执行时间而未考虑等待时间的长短。因此，这两种调度算法在某些极端情况下会带来某些不便。HRN调度策略同时考虑每个作业的等待时间长短和估计需要的执行时间长短，从中选出响应比最高的作业投入执行。这样，即使是长作业，随着它等待时间的增加，W / T也就随着增加，也就有机会获得调度执行。这种算法是介于FCFS和SJF之间的一种折中算法。 
算法原理：响应比R定义如下： R =(W+T)/T = 1+W/T 
其中T为该作业估计需要的执行时间，W为作业在后备状态队列中的等待时间。每当要进行作业调度时，系统计算每个作业的响应比，选择其中R最大者投入执行。 
算法优点：由于长作业也有机会投入运行，在同一时间内处理的作业数显然要少于SJF法，从而采用HRRN方式时其吞吐量将小于采用SJF 法时的吞吐量。 
算法缺点：由于每次调度前要计算响应比，系统开销也要相应增加。

4 时间片轮转算法（RR，Round-Robin） 
该算法采用剥夺策略。时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称RR调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。 
算法原理：让就绪进程以FCFS 的方式按时间片轮流使用CPU 的调度方式，即将系统中所有的就绪进程按照FCFS 原则，排成一个队列，每次调度时将CPU 分派给队首进程，让其执行一个时间片，时间片的长度从几个ms 到几百ms。在一个时间片结束时，发生时钟中断，调度程序据此暂停当前进程的执行，将其送到就绪队列的末尾，并通过上下文切换执行当前的队首进程，进程可以未使用完一个时间片，就出让CPU（如阻塞）。 
算法优点：时间片轮转调度算法的特点是简单易行、平均响应时间短。 
算法缺点：不利于处理紧急作业。在时间片轮转算法中，时间片的大小对系统性能的影响很大，因此时间片的大小应选择恰当 
怎样确定时间片的大小：

时间片大小的确定 
1.系统对响应时间的要求 
2.就绪队列中进程的数目 
3.系统的处理能力

5 多级反馈队列(Multilevel Feedback Queue) 
多级反馈队列调度算法是一种CPU处理机调度算法，UNIX操作系统采取的便是这种调度算法。 
多级反馈队列调度算法描述： 
　　1、进程在进入待调度的队列等待时，首先进入优先级最高的Q1等待。 
　　2、首先调度优先级高的队列中的进程。若高优先级中队列中已没有调度的进程，则调度次优先级队列中的进程。例如：Q1,Q2,Q3三个队列，只有在Q1中没有进程等待时才去调度Q2，同理，只有Q1,Q2都为空时才会去调度Q3。 
　　3、对于同一个队列中的各个进程，按照时间片轮转法调度。比如Q1队列的时间片为N，那么Q1中的作业在经历了N个时间片后若还没有完成，则进入Q2队列等待，若Q2的时间片用完后作业还不能完成，一直进入下一级队列，直至完成。 
　　4、在低优先级的队列中的进程在运行时，又有新到达的作业，那么在运行完这个时间片后，CPU马上分配给新到达的作业（抢占式）。 
　　在多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需之处理时间时，便能够较好的满足各种类型用户的需要。
6 实时调度
实时计算分为两种类型：硬实时，软实时
硬实时：系统需要在保证的时间内完成关键任务。通常，在提交进程时，同时有一条语句告诉系统用来完成或执行I/O所需要的时间。
软实时：要求关键进程要比其他较弱进程拥有更高的优先权。实现软实时要求自习设计调度程序和操作系统的有关方面：
第一，系统必须有优先权调度，且实时进程必须有最高的优先权。实时进程的优先权不随时间而下降，尽管非实时进程的优先权可以。
第二，分配延迟必须小。
7多级队列调度
（multilevel queue-scheduling algorithm）
不同队列可用于前台和后台进程，前台队列可能使用RR算法调度，而后台队列可能使用FCFS算法调度。
8 优先权调度
每个进程都有一个优先权与其关联，具有最高优先权的进程会被分配到CPU。具有相同优先权的进程按FCFS顺序调度。
优先权可以通过内部或外部方式来定义。
优先权调度可以使可抢占的或者非抢占的。
优先权调度算法的一个主要问题是无穷阻塞。解决办法是老化，老化是一种技术，以逐渐增加在系统中等待很长时间的进程的优先

