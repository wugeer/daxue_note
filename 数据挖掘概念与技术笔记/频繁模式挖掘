Apriori算法和FP-growth算法都是从TID项集格式(即{TID:itemset})的事务集中挖掘频繁模式，这种数据格式称为水平数据格式。
或者，数据也可以用项-TID集格式(即{item:TID_set}),这种数据格式称为垂直数据格式。
垂直数据格式挖掘频繁模式过程：
首先，通过扫描一次数据集，将水平格式的数据转换为垂直格式。项集的支持度计数简单地为项集的TID集的长度。从k=1开始，可以根据先验性质，使用频繁k项集来构造候选k+1项集，通过取频繁k项集的TID集的交，计算对应k+1项集的TID集。重复该过程，每次k增加１,直到不能再找到频繁项集或候选项集为止。

PS:在数据稠密或包含长模式时，使用差集技术(只记录两个父子项集之间的差)可以显著降低频繁项集垂直格式挖掘的开销。

挖掘闭频繁项集：
    １朴素方法：挖掘频繁项集的完全集，然后删除这样的频繁项集。他们是某个频繁项集的真子集，并且具有同样的支持度。然而，开销太大。
    ２挖掘过程中，直接搜索闭频繁项集。要求在挖掘过程中，一旦识别闭项集就尽快对搜索空间剪枝。剪枝策略如下：
    项合并：如果包含频繁项集X的每个事务都包含项集Y，但不包含Y的真超集，则X并上Y形成一个闭频繁项集，并且不必再搜索包含X但不包含Y的任何项集。
    子项集剪枝：如果频繁项集X是一个已经发现的闭频繁项集Y的真子集，并且X,Y支持度相等，则Ｘ和Ｘ在集合枚举树中的所有后代都不可能是闭频繁项集，因此可以剪枝
    项跳过：在深度优先挖掘闭项集时，每一层都有一个与头表和投影数据库相关联的前缀项集X.如果一个局部频繁项p在不同层的多个头表中都具有相同的支持度，则可以将p从较高层的头表中删除。
    
  　当一个新的频繁项集导出后，必须进行两种闭包检查：
       １超集检查：检查新的频繁项集是否是某个具有相同支持度的，已经发现的，闭项集的超集
       ２子集检查：检查新发现的项集是否是某个具有相同支持度，已经发现的，闭项集的子集
    为了帮助进行子集检查，可以构造一棵压缩的模式树，维持已发现的闭项集的集合。模式树的结构类似与FP树，不同之处在于所有已经发现的闭项集都显式地存放在一个对应的树分支中。
    好的性质：
    如果当前项集A被另一个已经发现的闭项集Ｂ所包含，那么
           １Ａ和B有相同的支持度
           ２Ａ的长度小于Ｂ
           ３Ａ的所有项都包含在Ｂ中
    利用这一性质，可以建立一个两层的散列索引结构来快速访问模式树：第一层使用Ａ中的最后一项的标识符作为散列码，因为该标识符一定在Ａ的分枝中，第二层使用Ａ的支持度作为散列码，因为Ａ和Ｂ有相同的而支持度。这将显著加快子集检查过程。